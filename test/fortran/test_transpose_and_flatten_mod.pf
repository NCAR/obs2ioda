module test_transpose_and_flatten_mod
    use goes_abi_converter_mod, only : transpose_and_flatten
    use funit
    implicit none
contains
    @test
    subroutine test_transpose_and_flatten_real()

        real, dimension(2, 3) :: mat
        real, dimension(6) :: flat, expected
        integer :: i

        ! Initialize test matrix: columns are [1 2], [3 4], [5 6]
        mat = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape(mat))

        ! Expected result after transpose and flatten
        expected = [1.0, 3.0, 5.0, 2.0, 4.0, 6.0]

        ! Call the subroutine
        call transpose_and_flatten(mat, flat)
        @assertTrue(all(flat == expected), message="Transpose and flatten failed for real matrix")

    end subroutine test_transpose_and_flatten_real

    @test
    subroutine test_transpose_and_flatten_int()

        integer, dimension(2, 3) :: mat
        integer, dimension(6) :: flat, expected
        integer :: i

        ! Initialize test matrix: columns are [1 2], [3 4], [5 6]
        mat = reshape([1, 2, 3, 4, 5, 6], shape(mat))

        ! Expected result after transpose and flatten
        expected = [1, 3, 5, 2, 4, 6]

        ! Call the subroutine
        call transpose_and_flatten(mat, flat)
        @assertTrue(all(flat == expected), message="Transpose and flatten failed for integer matrix")

    end subroutine test_transpose_and_flatten_int
end module test_transpose_and_flatten_mod
