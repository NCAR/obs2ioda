module Test_netcdf_var_mod
    use funit
    use netcdf_c_mod
    use netcdf_c_i_mod
    use Test_netcdf_fixture_t_mod
    implicit none
    @TestCase
    type, extends(Test_netcdf_fixture_t) :: Test_netcdf_var_t
    contains
        procedure :: test_netcdfVar => test_netcdfVar
    end type
contains

    @Test
    subroutine test_netcdfVar(this)
        class(Test_netcdf_var_t), intent(inout) :: this
        integer(c_int) :: netcdfID
        integer(c_int) :: status

        status = netcdfCreate(this%test_var_path, netcdfID)
        call assertEqual(0, status)

        status = netcdfAddGroup(netcdfID, this%test_group_name)
        call assertEqual(0, status)

        status = netcdfAddDim(netcdfID, this%test_global_dim_name, this%test_global_dim_len)
        call assertEqual(0, status)
        status = netcdfAddDim(netcdfID, this%test_dim_name, this%test_dim_len, this%test_group_name)
        call assertEqual(0, status)

        status = netcdfAddVar(netcdfID, this%test_int_var_name, NC_INT, 1, (/this%test_global_dim_name/), &
                this%test_group_name)
        call assertEqual(0, status)
        status = netcdfAddVar(netcdfID, this%test_int64_var_name, 10, 1, (/this%test_global_dim_name/), &
                this%test_group_name)
        call assertEqual(0, status)
        status = netcdfAddVar(netcdfID, this%test_real_var_name, NC_FLOAT, 1, (/this%test_global_dim_name/), &
                this%test_group_name)
        call assertEqual(0, status)
        status = netcdfAddVar(netcdfID, this%test_string_var_name, NC_STRING, 1, (/this%test_global_dim_name/), &
                this%test_group_name)
        call assertEqual(0, status)

        status = netcdfPutVar(netcdfID, this%test_int_var_name, this%test_int_var_data, this%test_group_name)
        call assertEqual(0, status)
        status = netcdfPutVar(netcdfID, this%test_int64_var_name, this%test_int64_var_data, this%test_group_name)
        call assertEqual(0, status)
        status = netcdfPutVar(netcdfID, this%test_real_var_name, this%test_real_var_data, this%test_group_name)
        call assertEqual(0, status)
        status = netcdfPutVar(netcdfID, this%test_string_var_name, this%test_string_var_data, this%test_group_name)

        call assertEqual(0, status)
        status = netcdfClose(netcdfID)
        call assertEqual(0, status)
    end subroutine test_netcdfVar

end module Test_netcdf_var_mod